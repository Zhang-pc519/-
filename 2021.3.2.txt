1.一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
#include<stdio.h>
#include<stdlib.h>
int jumpFloor(int n)
{
	if(n<=0)
	{
		return -1;
	}
	else if(n==1)
	{
		return 1;
	}
	else if(n==2)
	{
		return 2;
	}
	return jumpFloor(n-1)+jumpFloor(n-2);
}
int main()
{
	int n=0;
	printf("请输入跳的台阶数：");
	scanf("%d",&n);
	printf("%d\n",jumpFloor(n));
	system("pause");
	return 0;
}
1.编写程序求含有N个元素的一维数组的最大值、最小值及他们的下标。
要求：数组元素的输入、求最大值最小值及他们的下标通过函数实现，结果在主函数中输出.
#include<stdio.h>
#define N 5
void Input(int b[N])
{
	//输入N个整数
	int i;
	printf("请输入%d个整数：\n",N);
	for(i=0;i<N;i++)
	{
		scanf("%d",&b[i]);
	}
}
void Min(int b[N],int min[2])
{
	//求最小值及下标
	int i;
	min[0]=b[0];min[1]=0;
	for(i=1;i<N;i++)
	{
		if(b[i]<min[0])
		{
			min[0]=b[i];min[1]=i;
		}
	}
}
void Max(int b[N],int max[2])
{
	//求最大值及下标
	int i;
	max[0]=b[0];max[1]=0;
	for(i=1;i<N;i++)
	{
		if(b[i]>max[0])
		{
			max[0]=b[i];max[1]=i;
		}
	}
}
int main()
{
	int a[N],min[2],max[2];
	Input(a);
	Min(a,min);
	Max(a,max);
	printf("数组元素的最小值为：%d,下标为：%d\n",min[0],min[1]);
	printf("数组元素的最大值为：%d,下标为：%d\n",max[0],max[1]);
	return 0;
}

2.将冒泡排序函数中控制趟数和每趟比较次数的初值均从0改为1，修改函数并实现降序排序。
void Input(int b[N])
{
	//输入函数
	int i;
	printf("请输入%d个整数：\n",N);
		for(i=0;i<N;i++)
		{
			scanf("%d",&b[i]);
		}
}
void bubble_sort(int b[N])
{
	//冒泡排序函数
	int i,j,tmp;
	for(i=1;i<N;i++)
	{
		//外层循环控制趟数
		for(j=1;j<N-i+1;j++)
		{
			//内层循环控制每趟的比较次数
			if(b[j-1]<b[j])
			{
				tmp=b[j];
				b[j]=b[j-1];
				b[j-1]=tmp;
			}
		}
	}
}
void Print(int b[N])
{
	//输出函数
	int i;
	for(i=0;i<N;i++)
	{
		if(i%10==0)
			printf("\n");
		printf("%d",b[i]);
	}
	printf("\n");
}
int main()
{
	int a[N];
	Input(a);
	printf("排序前：");
	Print(a);
	bubble_sort(a);
	printf("排序后：");
	Print(a);
	return 0;
}