1.查找用户输入的数据是否在整型数组中，如果找到返回所在元素的下标，
并在主函数中输出是否找到的相关信息。
#include<stdio.h>
#define N 5
int Search(int a[],int x)
{
	int i;
	a[0]=x;
	for(i=N;a[i]!=x;i--);
	return i;
}
int main()
{
	int k,x,a[N+1]={0,12,18,22,9,5};
	printf("请输入待查找的整数：");
	scanf("%d",&x);
	k=Search(a,x);
	if(k)
		printf("\n%d找到，是第%d个元素。\n",x,k);
	else
		printf("\n%d未找到。\n",x);
	return 0;
}

2.计算用户输入的自然数n的阶乘，并统计位数。要求能精确计算较大数的阶乘，如10000！
#define N 50000		//n！的位数要足够大
int Fact(int bit[N],int n)
{
	int i,j,k=N-1,carry;	//k表示最高位的下标
	bit[k]=1;//0或1的阶乘
	for(i=2;i<=n;i++)
	{
		//以1！为基础，依次求2！，3！...直到n！
		carry=0;	//carry表示进位数，开始进位数为0
		for(j=N-1;j>-k;j--)
		{
			bit[j]=bit[j]*i+carry;
			carry=bit[j]/10;	//处理进位
			bit[j]=bit[j]%10;	//处理当前位
			if(j=k&&carry)		/*当处理到（i-1）！的最高为元素时（即j==k），
				                只要有进位（即carry！=0），最高位元素下标前移*/
				k--;
		}
	}
	return k;
}
int main()
{
	static int bit[N]={0};//存放n！的结果
	int i,k,n;
	printf("请输入一个不超过十万的自然数，计算它的阶乘：");
	scanf("%d",&n);
	k=Fact(bit,n);
	for(i=k;i<N;i++)
		printf("%d",bit[i]);
	printf("\n");
	printf("%d!是一个%d位数。\n",n,N-k);
	return 0;
}

3.输入一行字符，统计其中有多少个单词，单词之间用空格分隔。
#define N 81
int CountWord(char str[])
{
	int i,num=0,word=0;
	for(i=0;str[i]!='\0';i++)
	{
		if(str[i==32])
			word=0;
		else if(word==0)
		{
			word=1;
			num++;
		}
	}
	return num;
}
int main()
{
	char str[N];
	int num;
	printf("请输入一行字符：\n");
	gets(str);
	num=CountWord(str);
		printf("在这行字符中共有%d个单词。\n,num");
	return 0;
}